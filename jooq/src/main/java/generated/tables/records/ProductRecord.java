/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Product;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductRecord extends UpdatableRecordImpl<ProductRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>core.product.name</code>.
     */
    public ProductRecord setName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>core.product.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>core.product.organization_name</code>.
     */
    public ProductRecord setOrganizationName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>core.product.organization_name</code>.
     */
    public String getOrganizationName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>core.product.quantity</code>.
     */
    public ProductRecord setQuantity(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>core.product.quantity</code>.
     */
    public Integer getQuantity() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Product.PRODUCT.NAME;
    }

    @Override
    public Field<String> field2() {
        return Product.PRODUCT.ORGANIZATION_NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Product.PRODUCT.QUANTITY;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public String component2() {
        return getOrganizationName();
    }

    @Override
    public Integer component3() {
        return getQuantity();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public String value2() {
        return getOrganizationName();
    }

    @Override
    public Integer value3() {
        return getQuantity();
    }

    @Override
    public ProductRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProductRecord value2(String value) {
        setOrganizationName(value);
        return this;
    }

    @Override
    public ProductRecord value3(Integer value) {
        setQuantity(value);
        return this;
    }

    @Override
    public ProductRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductRecord
     */
    public ProductRecord() {
        super(Product.PRODUCT);
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(String name, String organizationName, Integer quantity) {
        super(Product.PRODUCT);

        setName(name);
        setOrganizationName(organizationName);
        setQuantity(quantity);
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(generated.tables.pojos.Product value) {
        super(Product.PRODUCT);

        if (value != null) {
            setName(value.getName());
            setOrganizationName(value.getOrganizationName());
            setQuantity(value.getQuantity());
        }
    }
}
